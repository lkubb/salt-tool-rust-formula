{#- vim: ft=jinja #}

{%- set users = {} -%}

{%- set user_settings = ["xdg", "completions", "dotconfig", "persistenv", "rchook", "completions", "rust"] -%}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in mapdata.get("users", {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get("rust", true) -%}
    {%- do users.update({tool_user: {"rust": {}}}) -%}
    {%- for user_setting in user_settings -%}
      {%- if tool_user_conf.get(user_setting) is not equalto None -%}
        {%- do users[tool_user].update({user_setting: salt["defaults.deepcopy"](tool_user_conf[user_setting])}) -%}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}

{#- update all users' configurations for this formula with the formula defaults -#}
{%- do salt["defaults.update"](users, {"rust": mapdata.get("defaults", {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({"_rust": {}}) -%}
  {%- do users[user].update({"name": user}) -%}
  {%- set user_info = salt["user.info"](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt["user.primary_group"](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split("/")[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt["defaults.merge"](user_info, users[user], in_place=false)) -%}
  {%- if users[user].xdg | default(true) -%}
    {#- cannot use environ.get because it only has access to current env, not a specific user"s -#}
    {%- load_yaml as xdg -%}
cache: {{ salt["cmd.run"]('[ -n "$XDG_CACHE_HOME" ] && echo "${XDG_CACHE_HOME}" || echo "${HOME}/.cache"', runas=user) }}
config: {{ salt["cmd.run"]('[ -n "$XDG_CONFIG_HOME" ] && echo "${XDG_CONFIG_HOME}" || echo "${HOME}/.config"', runas=user) }}
data: {{ salt["cmd.run"]('[ -n "$XDG_DATA_HOME" ] && echo "${XDG_DATA_HOME}" || echo "${HOME}/.local/share"', runas=user) }}
state: {{ salt["cmd.run"]('[ -n "$XDG_STATE_HOME" ] && echo "${XDG_STATE_HOME}" || echo "${HOME}/.local/state"', runas=user) }}
    {%- endload -%}
    {%- do users[user].update({"xdg": xdg}) -%}
    {%- do users[user]["_rust"].update({
        "confdir": xdg.data | path_join(mapdata.lookup.paths.xdg_dirname),
        "conffile": xdg.data | path_join(mapdata.lookup.paths.xdg_dirname, mapdata.lookup.paths.xdg_conffile),
        "datadir": xdg.data | path_join(mapdata.lookup.paths.xdg_dirname),
        "rustup_datadir": xdg.data | path_join(mapdata.lookup.paths.rustup_xdg_dirname),
        "env": {
          "CARGO_HOME": "${XDG_DATA_HOME:-$HOME/.local/share}/" ~ mapdata.lookup.paths.xdg_dirname,
          "CARGO_INSTALL_ROOT": "$HOME/.local",
        }
    }) -%}
    {%- if mapdata.install_method == "web" %}
      {%- do users[user]["_rust"].env.update({
            "RUSTUP_HOME": "${XDG_DATA_HOME:-$HOME/.local/share}/" ~ mapdata.lookup.paths.rustup_xdg_dirname,
      }) -%}
    {%- endif %}
  {%- else -%}
    {%- do users[user]["_rust"].update({
        "confdir": users[user].home | path_join(mapdata.lookup.paths.confdir),
        "conffile": users[user].home | path_join(mapdata.lookup.paths.confdir, mapdata.lookup.paths.conffile),
        "datadir": users[user].home | path_join(mapdata.lookup.paths.confdir),
        "rustup_datadir": users[user].home | path_join(mapdata.lookup.paths.rustup_confdir),
        "env": {}
    }) -%}
  {%- endif -%}
{%- endfor -%}

{#- finally embed parsed user config and info in mapdata -#}
{%- do mapdata.update({"users": users.values() | list}) -%}
